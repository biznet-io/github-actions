name: Example - Setup ASDF Plugins (Environment Variables Only)

# Global environment variables - define your tools once!
env:
  ASDF_PLUGINS: |
    [
      {"name": "deno", "version": "2.3.1"},
      {
        "name": "java", 
        "version": "adoptopenjdk-17.0.14+7",
        "env": {"JAVA_HOME": "{install_path}"}
      }
    ]
  ASDF_ADD_TO_PATH: "deno"

on:
  workflow_dispatch:
  push:
    paths:
      - 'setup-asdf-plugins/**'

jobs:
  test-global-env:
    name: Test Global Environment Variables
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install ASDF
        uses: asdf-vm/actions/setup@v3

      - name: Setup ASDF Plugins
        id: setup
        uses: ./setup-asdf-plugins
        # No configuration needed! Uses global env vars

      - name: Verify global environment setup
        run: |
          echo "=== Global Environment Setup Verification ==="
          echo "Installed plugins: ${{ steps.setup.outputs.installed-plugins }}"
          echo ""
          
          echo "=== Version Information ==="
          deno --version
          java -version
          echo ""
          
          echo "=== Environment Variables ==="
          echo "JAVA_HOME: $JAVA_HOME"
          echo "PATH contains Deno: $(echo $PATH | grep -o '[^:]*deno[^:]*' || echo 'Not found')"
          echo ""
          
          echo "=== Test Functionality ==="
          echo "console.log('Hello from Deno!');" | deno run -
          echo 'public class GlobalTest { public static void main(String[] args) { System.out.println("Hello from Java!"); } }' > GlobalTest.java
          javac GlobalTest.java
          java GlobalTest

  test-job-level-override:
    name: Test Job-Level Environment Override
    runs-on: ubuntu-latest
    env:
      # Override global environment for this job
      ASDF_PLUGINS: |
        [
          {"name": "node", "version": "20.10.0"},
          {"name": "python", "version": "3.11.7"}
        ]
      ASDF_ADD_TO_PATH: "node,python"
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install ASDF
        uses: asdf-vm/actions/setup@v3

      - name: Setup Different Tools for This Job
        id: job-setup
        uses: ./setup-asdf-plugins
        # Uses job-level env vars (Node + Python, not Deno + Java)

      - name: Verify job-level override
        run: |
          echo "=== Job-Level Override Verification ==="
          echo "Should have Node and Python (not Deno and Java)"
          echo "Installed plugins: ${{ steps.job-setup.outputs.installed-plugins }}"
          echo ""
          
          echo "=== Version Information ==="
          node --version
          python --version
          echo ""
          
          echo "=== Verify Deno/Java NOT installed ==="
          if command -v deno &> /dev/null; then
            echo "❌ Deno found (should not be installed in this job)"
          else
            echo "✅ Deno not found (correct - was overridden)"
          fi
          
          if command -v java &> /dev/null; then
            echo "❌ Java found (should not be installed in this job)"
          else
            echo "✅ Java not found (correct - was overridden)"
          fi
          
          echo ""
          echo "=== Test Functionality ==="
          echo "console.log('Hello from Node.js!');" | node
          echo "print('Hello from Python!')" | python

  test-multi-language-stack:
    name: Test Multi-Language Development Stack
    runs-on: ubuntu-latest
    env:
      ASDF_PLUGINS: |
        [
          {"name": "node", "version": "20.10.0"},
          {"name": "python", "version": "3.11.7"},
          {
            "name": "golang",
            "version": "1.21.5",
            "env": {
              "GOROOT": "{install_path}",
              "GOPATH": "$HOME/go"
            }
          },
          {"name": "rust", "version": "1.75.0"}
        ]
      ASDF_ADD_TO_PATH: "node,python,golang,rust"
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install ASDF
        uses: asdf-vm/actions/setup@v3

      - name: Setup Multi-Language Stack
        id: multi-setup
        uses: ./setup-asdf-plugins

      - name: Verify multi-language installation
        run: |
          echo "=== Multi-Language Stack Verification ==="
          echo "Installed plugins: ${{ steps.multi-setup.outputs.installed-plugins }}"
          echo ""
          
          echo "=== Version Checks ==="
          node --version
          python --version
          go version
          rustc --version
          echo ""
          
          echo "=== Environment Variables ==="
          echo "GOROOT: $GOROOT"
          echo "GOPATH: $GOPATH"
          echo ""
          
          echo "=== PATH Verification ==="
          echo "Node: $(which node)"
          echo "Python: $(which python)"
          echo "Go: $(which go)"
          echo "Rust: $(which rustc)"

      - name: Test all languages
        run: |
          echo "=== Testing Node.js ==="
          echo "console.log('Hello from Node.js!');" | node
          
          echo "=== Testing Python ==="
          echo "print('Hello from Python!')" | python
          
          echo "=== Testing Go ==="
          mkdir -p /tmp/go-test
          cd /tmp/go-test
          go mod init test
          echo 'package main; import "fmt"; func main() { fmt.Println("Hello from Go!") }' > main.go
          go run main.go
          
          echo "=== Testing Rust ==="
          echo 'fn main() { println!("Hello from Rust!"); }' > /tmp/hello.rs
          rustc /tmp/hello.rs -o /tmp/hello
          /tmp/hello

  test-custom-plugin-urls:
    name: Test Custom Plugin URLs
    runs-on: ubuntu-latest
    env:
      ASDF_PLUGINS: |
        [
          {
            "name": "deno",
            "version": "2.3.1",
            "url": "https://github.com/asdf-community/asdf-deno.git"
          },
          {
            "name": "java",
            "version": "adoptopenjdk-17.0.14+7",
            "url": "https://github.com/halcyon/asdf-java.git",
            "env": {"JAVA_HOME": "{install_path}"}
          }
        ]
      ASDF_ADD_TO_PATH: "deno"
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install ASDF
        uses: asdf-vm/actions/setup@v3

      - name: Setup Plugins with Custom URLs
        id: custom-setup
        uses: ./setup-asdf-plugins

      - name: Verify custom URL installation
        run: |
          echo "=== Custom URL Installation Results ==="
          echo "Installed plugins: ${{ steps.custom-setup.outputs.installed-plugins }}"
          echo ""
          
          deno --version
          java -version
          
          echo "=== Verify Environment ==="
          echo "JAVA_HOME: $JAVA_HOME"

  test-devops-tools:
    name: Test DevOps Tools Stack
    runs-on: ubuntu-latest
    env:
      ASDF_PLUGINS: |
        [
          {"name": "kubectl", "version": "1.28.4"},
          {"name": "helm", "version": "3.13.2"},
          {"name": "terraform", "version": "1.6.4"}
        ]
      ASDF_ADD_TO_PATH: "kubectl,helm,terraform"
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install ASDF
        uses: asdf-vm/actions/setup@v3

      - name: Setup DevOps Tools
        id: devops-setup
        uses: ./setup-asdf-plugins

      - name: Verify DevOps tools
        run: |
          echo "=== DevOps Tools Verification ==="
          echo "Installed plugins: ${{ steps.devops-setup.outputs.installed-plugins }}"
          echo ""
          
          echo "=== Version Information ==="
          kubectl version --client
          helm version
          terraform version
          echo ""
          
          echo "=== PATH Verification ==="
          echo "kubectl: $(which kubectl)"
          echo "helm: $(which helm)"
          echo "terraform: $(which terraform)"

  test-error-handling:
    name: Test Error Handling
    runs-on: ubuntu-latest
    continue-on-error: true
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install ASDF
        uses: asdf-vm/actions/setup@v3

      - name: Test Missing Environment Variable
        continue-on-error: true
        uses: ./setup-asdf-plugins
        env:
          ASDF_PLUGINS: ""  # Empty - should fail

      - name: Test Invalid JSON
        continue-on-error: true
        uses: ./setup-asdf-plugins
        env:
          ASDF_PLUGINS: |
            [
              {"name": "deno", "version": "2.3.1"
            ]

      - name: Test Missing Required Fields
        continue-on-error: true
        uses: ./setup-asdf-plugins
        env:
          ASDF_PLUGINS: |
            [
              {"name": "deno"},
              {"version": "1.0.0"}
            ]

      - name: Test Valid Configuration (Should Work)
        uses: ./setup-asdf-plugins
        env:
          ASDF_PLUGINS: |
            [
              {"name": "deno", "version": "2.3.1"}
            ]